// /******************
//  * Budgie-Desktop *
//  ******************/

// specific ripple-effect for IconTaskList
@keyframes budgie_ripple_effect {
  0% {
    background-image: radial-gradient(circle farthest-corner at center,
                                      gtkalpha($inverted_fg_color, 0.2) 0%,
                                      transparent 0%),
                      image(gtkalpha($inverted_fg_color, 0.1));
  }
  66% {
    background-image: radial-gradient(circle farthest-corner at center,
                                      gtkalpha($inverted_fg_color, 0.2) 100%,
                                      transparent 0%),
                      image(gtkalpha($inverted_fg_color, 0.1));
  }
  100% {
    background-image: radial-gradient(circle farthest-corner at center,
                                      gtkalpha($inverted_fg_color, 0) 100%,
                                      transparent 0%),
                      image(gtkalpha($inverted_fg_color, 0.1));
  }
}

// specific transition
$budgie_transition: opacity 0.2s $slope_medium,
                    background-color 0.4s $slope_slow,
                    background-image 0.4s $slope_slow,
                    box-shadow 0.2s $slope_slow;

// main container
.budgie-container { background-color: transparent; }

.budgie-panel {
  // solid-mode
  // always use dark-color of dark variant
  background-color: $panel_bg_color;
  color: $inverted_fg_color;
  font-weight: 700;
  transition: $budgie_transition;

  // used to indicate unread notifications
  .alert { color: $suggested_color; }

  // transparent-mode
  &.transparent {
    background-color: transparent;
    transition: $budgie_transition;

    box {
      &.start-region,
      &.center-region,
      &.end-region { // draw shadows by default
        // FIXME: NaTray puts widgets as "widgets",
        // so we can not render icons-shadows anyhow...
        image { -gtk-icon-shadow: $z-depth-1; }

        label { text-shadow: $z-depth-1; }
      }
    }
  }
}

@each $along_side, $opp_side in (top, bottom),
                                (bottom, top),
                                (left, right),
                                (right, left) {
  // panel shadow styling
  .#{$along_side} .shadow-block {
    background-color: transparent;
    background-image: linear-gradient(to #{$opp_side},
                                      gtkalpha(#000000, 0.23),
                                      gtkalpha(#000000, 0.08),
                                      transparent);
  }
}

// wnck tasklist styling
.budgie-panel button#tasklist-button {
  border: none;
  background-image: radial-gradient(circle farthest-corner at center,
                                    gtkalpha($inverted_fg_color, 0) 100%,
                                    transparent 0%),
                    image(gtkalpha($inverted_fg_color, 0));
  background-color: transparent;
  box-shadow: none; // unset standard wnck styling
  transition: $budgie_transition;

  @each $position, $_w, $_h in (top, 0, $icon_size * 1.5),
                               (bottom, 0, $icon_size * 1.5),
                               (left, $icon_size * 1.5, 0),
                               (right, $icon_size * 1.5, 0) {
    .#{$position}.budgie-container & {
      image {
        min-width: #{$_w};
        min-height: #{$_h};
      }
    }
  }

  label,
  image { opacity: 0.75; }

  &:hover,
  &:active,
  &:checked {
    box-shadow: none;

    label,
    image { opacity: 1.0; }
  }

  &:active {
    transition: $budgie_transition,
                background-image 0s;
    animation: budgie_ripple_effect 0.3s $slope_slow forwards;
  }
}

// icon tasklist styling
box.horizontal.pinned,
box.vertical.pinned { // drop-target
  &:drop(active) {
    border-color: transparent;
    border-radius: 0;
    background-color: gtkopacity($drop_target_color, 0.2);
    box-shadow: inset 0 0 0 2px $drop_target_color;
  }
}

.budgie-panel {
  button.flat.launcher {
    min-width: $icon_size;
    min-height: $icon_size;
    padding: 0;
    border-radius: 0;
    background-image: radial-gradient(circle farthest-corner at center,
                                      gtkalpha($inverted_fg_color, 0) 100%,
                                      transparent 0%),
                      image(gtkalpha($inverted_fg_color, 0));
    background-position: center center;
    transition: $budgie_transition;

    > image {
      opacity: 0.5;
      transition: opacity 0.2s $slope_medium,
                  background-image 0s;
    }

    &:hover {
      -gtk-icon-filter: brightness(1.2);

      > image { opacity: 0.75; }
    }
    &:active {
      transition: $budgie_transition,
                  background-image 0s;
      animation: budgie_ripple_effect 0.3s $slope_slow forwards;

      > image { opacity: 1.0; }
    }
    &:checked {
      background-color: transparent;
      &:hover { -gtk-icon-filter: brightness(1.2); }

      > image { opacity: 1.0; }
    }
  }

  .unpinned button.flat.launcher,
  .pinned button.flat.launcher.running {
    &:hover { -gtk-icon-filter: brightness(1.2); }

    > image { opacity: 1.0; }
  }
}

// draw underscores
@each $along_side, $_line in (top, 0 2px),
                             (bottom, 0 -2px),
                             (left, 2px 0),
                             (right, -2px 0) {
  .#{$along_side} .budgie-panel {
    button#tasklist-button,
    button.flat.launcher {
      &:hover {
        box-shadow: inset #{$_line} gtkalpha($inverted_fg_color, 0.4);
      }
      &:active,
      &:checked {
        box-shadow: inset #{$_line} $selected_bg_color;
      }
    }
  }
}

// draw underscores and dots
@each $position, $_line in (top, 0 2px),
                           (bottom, 0 -2px),
                           (left, 2px 0),
                           (right, -2px 0) {
  .#{$position} .budgie-panel {
    .unpinned button.flat.launcher,
    .pinned button.flat.launcher.running {
      > image {
        background-image: image($selected_bg_color);
        background-position: #{$position} center;
        background-size: 2px 2px;
        background-repeat: no-repeat;
        transition: opacity 0.2s $slope_medium,
                    background-image 0s;
      }

      &:hover,
      &:active,
      &:checked {
        box-shadow: inset #{$_line} $selected_bg_color;

        > image { background-image: none; }
      }
    }
  }
}

.budgie-panel .end-region {
  > widget > widget {
    > box.horizontal { // 'Stats Indicator'
      > widget > widget > image { // 'bluetooth'
        &:dir(ltr) { margin: 0 2px 0 -1px; }
        &:dir(rtl) { margin: 0 -1px 0 2px; }
      }

      > widget.sound-applet > widget > image { // 'sound'
        min-width: $icon_size + 2px;
        margin: 0;
      }

      > widget > widget > box.horizontal > image,
      box.battery-icon.horizontal > image { // 'battery'
        min-width: $icon_size + 6px;
      }
    }

    box.battery-icon { // 'percent label'
      &.horizontal > label.percent-label {
        &:dir(ltr) { margin: 0 -6px 0 3px; }
        &:dir(rtl) { margin: 0 3px 0 -6px; }
      }

      &.vertical > label.percent-label {
        font-size: 75%;
        &:dir(ltr) { margin-right: -2px; }
        &:dir(rtl) { margin-left: -2px; }
      }
    }

    > image { // 'Notification' and 'User Indicator'
      min-width: $icon_size + 4px;
    }
  }
}

// budgie specific popover widgets
window.budgie-popover:not(.csd) {
  &.background {
    @extend popover.background;
    padding: 0; // unset padding
    background-clip: border-box;
    // FIXME: we can't expose depth-3
    &, &:backdrop { box-shadow: $z-depth-2; }
  }

  > frame.container {
    margin: 0 -1px -1px; // remove gap
    padding: 2px 0 0;

    .bottom.budgie-container & { padding: 2px 0 2px; } // revive bottom padding

    &,
    > border {
      border-style: none; // hide container borders
      background-color: $secondary_base_color;
    }
  }
}

// main menu styling
.budgie-panel {
  button.flat.budgie-menu-launcher {
    min-width: $icon_size;
    min-height: $icon_size;
    padding: 0;
    border: 0 none transparent;
    border-radius: 0;
    background-image: radial-gradient(circle farthest-corner at center,
                                      gtkalpha($inverted_fg_color, 0.4) 50%,
                                      transparent 0%),
                      image(gtkalpha($inverted_fg_color, 0.5));
    background-repeat: no-repeat;
    background-position: center center;
    background-size: 0% 0%; // hide ripples in normal state
    background-color: transparent;
    color: $inverted_fg_color;
    transition: background-image 0s,
                background-size 0s;
    &:hover {
      background-color: transparent;
      color: $selected_fg_color;
    }
    &:checked {
      background-image: radial-gradient(circle farthest-corner at center,
                                        gtkalpha($inverted_fg_color, 0) 50%,
                                        transparent 0%),
                        image(gtkalpha($inverted_fg_color, 0));
      background-size: 100% * 2 100% * 2;
      background-color: transparent;
      color: $selected_fg_color;
      transition: background-image 0.4s $slope_slow,
                  background-size 0.4s $slope_medium;
    }
  }
}

.budgie-menu {
  background-color: $secondary_base_color;

  &.background {
    border-style: solid none none; // remove side/bottom borders

    &,
    .container {
      padding: 2px 0 0; // remove side/bottom padding

      .bottom.budgie-container & { padding: 2px 0 2px; } // revive bottom padding
    }
  }

  scrolledwindow,
  list,
  row,
  scrollbar { // reset styling
    min-width: 0;
    min-height: 0;
    border: none;
    background: none;
    box-shadow: none;
  }

  row.activatable { // reset background
    padding: 0;
    background-image: none;
    background-color: $secondary_base_color;
    color: $secondary_fg_color;
    transition-duration: 0s;

    // FIXME: enlarge vertical spacing with padding of icons
    image { padding: rem(8px) 0; }

    &:hover,
    &:selected {
      background-image: none;
      background-color: $secondary_base_color;
      // child button node has hover state already
      color: $secondary_fg_color;
      transition-duration: 0s;
    }

    button.flat {
      border-radius: 0; // remove roundness
      -gtk-outline-radius: 0;

      > box > label { // tweak base-line
        padding-bottom: rem(1.3px, $sw: 1.0);
      }
    }
  }

  .categories { // left-paned elements of GtkPopover
    background-color: $secondary_dark_color;
    &:dir(ltr) { border-right: 1px solid $borders_color; }
    &:dir(rtl) { border-left: 1px solid $borders_color; }

    .bottom.budgie-container & { border-bottom: 1px solid $borders_color; }

    button.flat.radio.category-button {
      border-radius: 0; // remove roundness
      &:not(:active) { transition-duration: 0.1s; } // use list-transition
      &:checked {
        background-image: none;
        background-color: transparent;
        color: $selected_bg_color;
        &:hover {
          background-color: gtkopacity($selected_bg_color, 0.1);
          color: $selected_bg_color;
        }
        &:disabled {
          color: gtkopacity($selected_bg_color, 0.4);

          label { color: inherit; }
        }
      }

      > box > label { // tweak vertical spacing and font weight
        padding: rem(5.3px, $sw: 1.0) 0 rem(6.7px, $sw: 1.0);
        font-weight: 500;
      }
    }
  }
}

// user-indicator styling
.user-menu {
  background-color: $secondary_base_color;

  list,
  row { // reset styling
    border: none;
    background: none;
    box-shadow: none;
  }

  row {
    // stop weird and unhandled ripple-effect
    &.activatable {
      &, .indicator-item {
        &:active,
        &:selected { animation: none; }
      }
    }

    &.activatable {
      background-image: none;
      background-color: $secondary_base_color;
      color: $secondary_fg_color;
      transition-duration: 0s;

      .indicator-item {
        label,
        image { color: $secondary_fg_color; }
      }

      // FIXME: enlarge vertical spacing with padding of icons
      image { padding: rem(5.3px) 0 rem(6.7px); }

      // use asymmetrical separators
      separator.horizontal {
        min-width: 1px;
        min-height: 1px;

        &:dir(ltr) { border-left: $icon_size * 2 solid transparent; }
        &:dir(rtl) { border-right: $icon_size * 2 solid transparent; }
      }

      &:hover,
      &:selected {
        background-image: none;
        background-color: $secondary_base_color;
        color: $secondary_fg_color;
        transition-duration: 0s;

        .indicator-item {
          label,
          image { color: $secondary_fg_color; }

          &:hover,
          &:active,
          &:checked {
            label,
            image { color: $fg_color; }
          }
        }
      }
    }
  }

  // top-row (user-name and avatar)
  > box.vertical row.activatable:first-child,
  > frame.container > box.vertical row.activatable:first-child {
    margin-bottom: rem(10.7px); // fix truncated drop-shadow
    outline-offset: 0;
    outline-width: 0;

    .indicator-item {
      background-color: $suggested_color;
      box-shadow: $z-depth-1,
                  inset 0 1px $highlight_color;
      transition-timing-function: $slope_medium;
      transition-property: box-shadow;
      transition-duration: 0.2s;

      &:dir(ltr) { // mask avatar's background
        padding-left: 7px; // non-scaling unit
        background-image: image($borders_color);
        background-position: left center;
        background-repeat: no-repeat;
        background-size: 38px auto; // non-scaling unit
      }
      &:dir(rtl) {
        padding-right: 7px;
        background-image: image($borders_color);
        background-position: right center;
        background-repeat: no-repeat;
        background-size: 38px auto;
      }

      label {
        color: $secondary_selected_fg_color;

        &:dir(ltr) { padding-left: rem(8px); }
        &:dir(rtl) { padding-right: rem(8px); }
      }

      image {
        color: $secondary_selected_fg_color;

        &:first-child { // avatar image
          min-width: 24px;
          min-height: 20px;
          padding-top: rem(6.7px);
          opacity: 0.9;
        }
      }

      &:hover {
        box-shadow: $z-depth-2,
                    inset 0 1px $highlight_color;
        transition-timing-function: $slope_medium;
        transition-property: box-shadow;
        transition-duration: 0.2s;

        label { color: $selected_fg_color; }

        image {
          color: $selected_fg_color;

          &:first-child { opacity: 1.0; }
        }
      }

      label { font-weight: 700; }
    }
  }
}

// raven styling
.raven-frame { // hide frame
  > border { border: none 0 transparent; }
}

.raven {
  padding: 0;
  border: none;
  color: $secondary_fg_color;
  background-color: $secondary_dark_color;

  .raven-header {
    border: none;
    color: $tertiary_fg_color;
    background-color: transparent;
    font-weight: 700;

    &.top { // always use dark variant
      background-color: $inverted_dark_color;
      color: $inverted_fg_color;
      box-shadow: if($variant == 'light', $header-shadow-light,
                                          $header-shadow-dark);

      button.image-button,
      button.text-button {
        color: $inverted_secondary_fg_color;
        &:hover,
        &:active,
        &:checked { color: $inverted_fg_color; }
        &:disabled { color: $insensitive_inverted_fg_color; }
      }

      > image { // gear icon in settings-view
        &:dir(ltr) { margin-left: 4px; }
        &:dir(rtl) { margin-right: 4px; }
      }

      stackswitcher.linked > button.text-button.radio {
        // show underlines for :checked only
        &:not(:checked) { border-image: none; }
      }
    }

    // reduce the gap between child elements
    &:not(.top):not(.bottom) { margin-top: rem(-10.7px); }

    // last-child is constructed without header-label
    &:not(.top):not(.bottom):not(:last-child) {
      > label,
      > box > label,
      > box > image { color: $tertiary_fg_color; }
    }
  }

  > stack > box.vertical > stack > stack > box.vertical > .raven-header {
    // revert to original top-margin for 'AppletSettings'
    margin-top: 0;
  }

  .raven-background {
    border-width: 1px 0 0;
    border-style: solid none none;
    border-color: $borders_color;
    background-color: transparent;
    box-shadow: if($variant == 'light', $inline-shadow-light,
                                        $inline-shadow-dark);
  }

  .powerstrip {
    background-color: $panel_bg_color;
    box-shadow: none;

    // = stackswitcher width in raven-header
    $strip_width: rem(112px * 2, $sw: 1.0);

    button.flat.image-button {
      min-width: $strip_width / 3;
      margin: -2px -8px;
      padding: rem(6.7px, $sw: 1.0) 0;
      color: $inverted_fg_color;
      &:hover,
      &:active,
      &:checked { color: $selected_fg_color; }
      &:disabled {
        @include button(flat-insensitive,
                        transparent,
                        $insensitive_inverted_fg_color);
      }
    }
  }

  .option-subtitle {
    color: $insensitive_secondary_fg_color;
    font-size: 90%;
  }

  scrolledwindow,
  list { background: transparent; }

  row.activatable {
    background-color: transparent;
    &:hover { color: $fg_color; }
    &:selected {
      &, label {
        color: $selected_bg_color;
      }
      &:hover { background-color: gtkopacity($selected_bg_color, 0.1); }
    }

    separator {
      min-height: 1px;
      min-width: 1px;
      margin: 0 rem(5.3px);
      border: none;
      color: transparent;
      background-color: transparent;
      background-image: image(gtkopacity($fg_color, 0.1));
      background-position: center;
      background-repeat: no-repeat;
      background-size: auto 1px;
    }
  }

  // use flat-style
  button.image-button {
    @include button(flat-normal);
    &:hover {
      @include button(flat-hover);
      -gtk-icon-filter: brightness(1.2);
      }
    &:active { @include button(flat-active); }
    &:disabled { @include button(flat-insensitive); }
    &:checked { @include button(flat-checked); }
    &:checked:disabled { @include button(flat-checked-insensitive); }
  }

  // enforce square outlines
  .linked > button.image-button { -gtk-outline-radius: 0; }

  .raven-header {
    > .linked { margin: 0 rem(10.7px, $sw: 1.0); }

    > button.image-button { // 'gear' button
      min-width: $widget_size - if($ref_weight < 1.0, 10.7px, 5.3px);
      min-height: $widget_size - if($ref_weight < 1.0, 10.7px, 5.3px);
      padding: 0;
    }

    > button.text-button { // 'exit' button
      min-width: $widget_size - if($ref_weight < 1.0, 2.7px, 0);
      min-height: $widget_size - if($ref_weight < 1.0, 10.7px, 5.3px);
      padding: 0;
      background-color: $suggested_color;
      &:hover {
        &, label { color: $selected_fg_color; }
      }
      &:active {
        background-color: $selected_bg_color;

        &, label { color: $selected_fg_color; }
      }
      &:checked {
        background-color: mix($selected_fg_color, $suggested_color, 20%);

        &, label { color: $secondary_selected_fg_color; }
      }
      &:disabled {
        @include button(flat-insensitive, $track_color, $insensitive_fg_color);
      }

      label {
        padding-bottom: rem(1.3px);
        color: $secondary_selected_fg_color;
      }
    }

    button.flat.expander-button { // expander arrow buttons
      min-width: $icon_size;
      min-height: $icon_size;
      padding: rem(8px);
      border-radius: 100px;
      -gtk-outline-radius: 100px;
      color: $tertiary_fg_color;
      &:hover,
      &:active { color: $fg_color; }

      &:dir(ltr) { margin-right: rem(2.7px); }
      &:dir(rtl) { margin-left: rem(2.7px); }
    }

    button.flat.image-button.primary-control { // close button in MPRIS
      min-width: $icon_size;
      min-height: $icon_size;
      padding: rem(8px);
      color: gtkopacity($destructive_color, 0.75);
      &:hover,
      &:active,
      &:checked { color: $destructive_color; }
      &:disabled { color: gtkopacity($destructive_color, 0.4); }
    }

    // reduce height of scale node
    scale { padding: rem(10px - 2px, $sw: 1.0); }

    > box.horizontal > combobox > box.linked > button.combo {
      // 'Top Panel'/'Bottom Panel' combo node
      // FIXME: set min-width for prevent unwanted shrinking horizontally
      min-width: rem(120px, $sw: 1.0);
    }
  }

  stackswitcher.linked > button.text-button.radio { // switcher buttons
    min-width: rem(112px, $sw: 1.0);
    min-height: $widget_size - if($ref_weight < 1.0, 10.7px, 5.3px);
    padding-top: 0;
    padding-bottom: 0;

    label { padding-bottom: rem(1.3px); }
  }

  calendar {
    border: none;
    background-color: transparent;
  }

  // notification list
  box.vertical > stack > box.vertical > .raven-background {
    > viewport.frame > list > row.activatable {
      padding-bottom: 4px;
      border-bottom: 1px solid $borders_color;
      &:selected {
        &, &:focus {
          background-color: gtkopacity($selected_bg_color, 0.2);
          &:dir(ltr) { box-shadow: inset 4px 0 $selected_bg_color; }
          &:dir(rtl) { box-shadow: inset -4px 0 $selected_bg_color; }

          > grid > label {
            &, &.dim-label {
              color: $fg_color;
              opacity: 1.0;
            }
          }

          > grid > image { color: $fg_color; }
        }
      }
    }
  }
}

// MPRIS Applet
.raven-mpris {
  border: none;
  color: $fg_color;
  background-color: gtkopacity($dark_color, 0.9);

  button.image-button { padding: rem(8px); }
}

// clock-applet styling
.budgie-panel { // legacy
  // shrink label
  > box widget > widget > label {
    margin-top: rem(-0.7px, $sw: 1.0);
    margin-bottom: -2px;
    padding: 1.3px 0 0;
    font-size: 80%;
  }
}

widget.budgie-clock-applet > widget > box > label {
  .top.budgie-container &,
  .bottom.budgie-container & {
    font-size: 100%;
    &:only-child {
      &:dir(ltr) {
        margin-left: 3px - 1px;
        margin-right: 3px - 2px;
      }
      &:dir(rtl) {
        margin-left: 3px - 2px;
        margin-right: 3px - 1px;
      }
    }
    &:first-child {
      &:dir(ltr) { margin-left: 3px - 1px; }
      &:dir(rtl) { margin-right: 3px - 1px; }
    }
    &:last-child {
      &:dir(ltr) { margin-right: 3px + 2px; }
      &:dir(rtl) { margin-left: 3px + 2px; }
    }
  }

  .left.budgie-container &,
  .right.budgie-container & {
    font-size: 80%;
    &:first-child {
      margin-top: 3px + 2px;
      margin-bottom: 0;
    }
    &:last-child {
      margin-top: 0;
      margin-bottom: 3px + 1px;
      // specificity bump
      &:only-child { margin-top: 3px + 2px; }
    }
  }
}

// popover of sound-indicator styling
.budgie-container > popover.background > box.vertical, // legacy
window.budgie-popover.background frame.container > box.vertical {
  > button.flat.image-button {
    min-width: rem($widget_size, $sw: 1.0);
    min-height: rem($widget_size, $sw: 1.0);
    margin: rem(2.7px, $sw: 1.0) 0;
    padding: 0;

    &:first-child { // '+' button
      &:hover {
        background: none;
        color: $success_color;
        animation: volume_hover 0.2s linear forwards;
      }
    }

    &:last-child { // '-' button
      &:hover {
        background: none;
        color: $error_color;
        animation: volume_hover 0.2s linear forwards;
      }
    }
  }
}

window.sound-popover.background box.horizontal {
  > button.flat.image-button { // horizontal layout
    min-width: rem($widget_size - 6.7px, $sw: 1.0);
    min-height: rem($widget_size - 6.7px, $sw: 1.0);
    margin: 0;
    padding: 0;

    &:first-child { // '-' button
      &:hover {
        background: none;
        color: $error_color;
        animation: volume_hover 0.2s linear forwards;
      }
    }

    &:last-child { // '+' button
      &:hover {
        background: none;
        color: $success_color;
        animation: volume_hover 0.2s linear forwards;
      }
    }
  }

  > scale.horizontal {
    padding-top: rem(5.3px, $sw: 1.0);
    padding-bottom: rem(5.3px, $sw: 1.0);
  }
}

// night-light-indicator styling
.night-light-indicator {
  &,
  frame.container { padding: 0 2px 2px; }

  .view-header {
    label {
      @extend .dim-label;
      font-size: 15px;
      font-weight: 400;
      &:dir(ltr) { padding-left: 4px; }
      &:dir(ltr) { padding-right: 4px; }
    }
  }

  box.vertical > button.flat.display-settings-button {
    @extend %transition; // revive transitions
    border-radius: 0;
    border: none;
    background-color: transparent;
    color: $secondary_accent_label_color;
    font-weight: 700;
    &:hover {
      @extend %transition; // revive transitions
      background-color: transparent;
      color: $accent_label_color;
    }
    &:active {
      background-color: transparent;
      color: $accent_label_color;
    }

    label { padding: rem(5.3px) 0 rem(6.7px); }
  }
}

// places-indicator styling
popover.places-menu {
  &.background {
    &,
    .container {
      padding: 2px 0 0; // remove side/bottom padding
      border-style: solid none none; // remove side/bottom borders
    }
  }

  box.places-section-header {
    padding: 0;

    %header_label {
      margin-bottom: rem(1.3px, $sw: 1.0);
      padding-bottom: rem(4px);
      font-weight: 700;
    }

    %folder_image {
      color: $accent_color;
      &:dir(ltr) { margin-left: 4px; }
      &:dir(rtl) { margin-right: 4px; }
    }

    > button.flat:not(.image-button) { // an actual child
      padding: rem(5.3px) rem(5.3px);
      border-radius: 0;
      -gtk-outline-radius: 0;
      &:not(:active) {
        transition: opacity 0.2s $slope_medium,
                    border-color 0.2s $slope_medium,
                    background-color 0.2s $slope_slow,
                    background-image 0.2s $slope_slow,
                    box-shadow 0.2s $slope_slow;
      }

      box.horizontal {
        > label { @extend %header_label; }

        > image {
          &:first-child { @extend %folder_image; }
          &:not(:first-child) { // 'arrow'
            // same margins with 'eject' button
            &:dir(ltr) { margin-right: rem(5.3px); }
            &:dir(rtl) { margin-left: rem(5.3px); }
          }
        }
      }
    }

    // for legacy
    > label {
      @extend %header_label;
      color: $secondary_fg_color;
    }

    > image {
      @extend %folder_image;
      &:dir(ltr) { padding: rem(2.7px) 0 rem(4px) rem(2.7px); }
      &:dir(rtl) { padding: rem(2.7px) rem(2.7px) rem(4px) 0; }
    }

    button.image-button {
      margin: rem(2.7px) rem(5.3px) rem(4px);
      &:not(:active) {
        transition: opacity 0.2s $slope_medium,
                    border-color 0.2s $slope_medium,
                    background-color 0.2s $slope_slow,
                    background-image 0.2s $slope_slow,
                    box-shadow 0.2s $slope_slow;
      }
    }
  }

  .alternative-label { // 'always expanded' option
    font-size: 15px; // same size with 'Local volumes' label?
    font-weight: 400;

    // parent popover node already has 2px top-padding
    &:dir(ltr) { padding: 1px rem(4px) rem(4px) 3px; }
    &:dir(rtl) { padding: 1px 3px rem(4px) rem(4px); }
  }

  box.vertical > revealer {
    > list { // drop-down list
      border-width: 1px 0 1px;
      border-style: solid none solid;
      border-color: $borders_color transparent $borders_color;
      background-color: $secondary_dark_color;
      box-shadow: if($variant == 'light', $inline-shadow-light,
                                          $inline-shadow-dark);

      &.always-expand { // 'always expanded' option
        // unset revealer elevations
        border: none;
        background-color: transparent;
        box-shadow: none;
      }
    }

    infobar.message-bar {
      border-radius: 2px 2px 0 0;
    }
  }

  list {
    background-color: transparent;

    > row.activatable {
      transition: none;
      &:hover,
      &:active {
        color: $fg_color;

        button.text-button.name-button { // = 'toolbutton > button'
          &,
          &:hover,
          &:active {
            color: $fg_color;
            background-color: transparent;
            background-image: none;
            transition: none;
            animation: none;
          }
          &:active { animation: list_ripple_effect 0.2s $slope_slow forwards; }
        }
      }

      button.image-button { // revive button transitions
        &:not(:active) {
          transition: opacity 0.2s $slope_medium,
                      border-color 0.2s $slope_medium,
                      background-color 0.2s $slope_slow,
                      background-image 0.2s $slope_slow,
                      box-shadow 0.2s $slope_slow;
        }
      }

      button.text-button.name-button {
        > box.horizontal { // adjust spacing
          > image,
          > spinner { margin: rem(5.3px) 0; }

          > label { padding-bottom: rem(1.3px, $sw: 1.0); }
        }
      }

      button.image-button.unmount-button {
        &:not(.text-button) { // specificity bump for overriding our default
                              // 'eject' button spacing
          margin: rem(1.3px) rem(5.3px);
          padding: rem(4px);
        }
      }
    }

    label.dim-label {
      font-size: 90%;
      font-weight: 700;
    }
  }

  box.unlock-area {
    border-width: 1px 0 1px;
    border-style: solid none solid;
    border-color: $borders_color;
    background-color: $secondary_dark_color;
    box-shadow: if($variant == 'light', $inline-shadow-light,
                                        $inline-shadow-dark);

    entry { // where is the combo node?
      min-height: $icon_size;
      min-width: $icon_size;
      margin: rem(1.3px) rem(5.3px);
      padding: rem(4px);
    }

    button {
      min-height: $icon_size;
      min-width: $icon_size;
      margin: rem(1.3px) rem(5.3px);
      padding: rem(4px);
      border-radius: 2px; // revert to square button
      -gtk-outline-radius: 2px;
    }
  }
}

// keyboard indicator applet
.top.budgie-container,
.bottom.budgie-container {
  widget.keyboard-indicator >  widget > box.horizontal {
    > widget > image {
      margin-top: rem(-0.7px, $sw: 1.0);
      &:dir(ltr) { padding: 2.7px 0 0 3px; }
      &:dir(rtl) { padding: 2.7px 3px 0 0; }
    }

    > stack > widget.keyboard-label > label {
      margin-top: rem(-0.7px, $sw: 1.0);
      &:dir(ltr) { padding: 1.3px 3px rem(1.3px, $sw: 1.0) 0; }
      &:dir(rtl) { padding: 1.3px 0 rem(1.3px, $sw: 1.0) 3px; }
    }
  }
}

// separator applet
.budgie-panel > box > widget > separator {
  // borders_color -> track_color
  background-color: gtkopacity($inverted_fg_color, 0.2);
}

// workspace-switcher applet
@each $position, $_line in (top, 0 2px), // legacy
                           (bottom, 0 -2px),
                           (left, 2px 0),
                           (right, -2px 0) {
  .#{$position}.budgie-container wnck-pager {
    &:hover { box-shadow: inset #{$_line} gtkalpha($inverted_fg_color, 0.4); }
    &:selected { box-shadow: inset #{$_line} $selected_bg_color; }
  }
}

widget > box.workspace-switcher {
  // main container
  > box.workspace-layout {
    widget.workspace-item {
      @each $position, $_size in (top, calc(100% - 4px) 2px),
                                 (bottom, calc(100% - 4px) 2px),
                                 (left, 2px calc(100% - 4px)),
                                 (right, 2px calc(100% - 4px)) {
        .#{$position}.budgie-container & {
          background-image: image(gtkopacity($inverted_fg_color, 0.4));
          background-position: #{$position} center;
          background-repeat: no-repeat;
          background-size: #{$_size};
          transition-duration: 0s; // for underline-indicators

          &.current-workspace {
            background-image: image($selected_bg_color);
          }
        }
      }

      button.workspace-icon-button {
        min-width: $icon_size;
        min-height: $icon_size;
        padding: 4px;
        border-radius: 2px;
        transition: $budgie_transition;

        > image { opacity: 0.5; }

        &:hover,
        &:active {
          -gtk-icon-effect: highlight;

          > image { opacity: 0.75; }
        }
      }

      // counter
      label.workspace-more-label {
        font-weight: 700;
        opacity: 0.5;
      }

      &.current-workspace {
        button.workspace-icon-button {
          > image { opacity: 1.0; }

          &:hover,
          &:active { -gtk-icon-effect: highlight; }
        }

        label.workspace-more-label { opacity: 1.0; }
      }
    }
  }

  // 'plus' button
  button.image-button.workspace-add-button { // expanded?
    @extend %button_flat_normal;
    min-width: $icon_size;
    min-height: $icon_size;
    padding: 4px;
    border-radius: 0;
    color: $inverted_secondary_accent_label_color;
    background-color: transparent;
    &:hover {
      @extend %button_flat_hover;
      background-color: transparent;
      color: $inverted_accent_label_color;
    }
    &:active {
      @extend %button_flat_active;
      background-color: transparent;
      color: $inverted_accent_label_color;
    }
    &:disabled { @include button(flat-insensitive); }
  }
}

window.budgie-popover.workspace-popover {
  $max_children_per_line: 4;
  $requested_width: 150px;

  box.workspace-popover-button-box {
    > button.flat { // 'Rename' and 'Remove'
      min-width: $requested_width;
      padding: rem(5.3px) rem(8px + 5.3px) rem(6.7px);
      border-radius: 0;
      -gtk-outline-radius: 0;
      font-weight: 500;

      &:first-child { // draw an arrow
        &:dir(ltr) {
          border-image:-gtk-icontheme("pan-end-symbolic")
                                      0 13.3 0 0 / 0 13.3px 0 0;
        }
        &:dir(rtl) {
          border-image:-gtk-icontheme("pan-end-symbolic")
                                      0 0 0 13.3 / 0 0 0 13.3px;
        }
      }
    }

    // hide unneeded separators
    > separator.horizontal {
      min-height: 0;
      margin: 0;
      background-color: transparent;
    }
  }

  flowbox > flowboxchild { // apps icon grid
    button.flat:not(:active) {
      transition-property: opacity,
                           border-color,
                           border-image,
                           background-color,
                           background-image,
                           box-shadow,
                           icon-shadow;
      transition-timing-function: $slope_slow;
      transition-duration: 0.2s;
    }

    image {
      padding: ($requested_width - $icon_size * ($max_children_per_line + 1))
               / ($max_children_per_line * 2)
               0;
    }
  }
}

// show-desktop applet
@each $position, $_spacing, $_line in (top, 0 6px, 0 2px),
                                      (bottom, 0 6px, 0 -2px),
                                      (left, 3px 0, 2px 0),
                                      (right, 3px 0, -2px 0) {
  .#{$position}.budgie-container .budgie-panel {
    > box > widget > button.flat {
      // specificity bump to prevent conflicts
      &:not(.raven-trigger):not(.budgie-menu-launcher) {
        min-width: $icon_size;
        min-height: $icon_size;
        padding: #{$_spacing};
        border-radius: 0;
        color: $insensitive_inverted_fg_color; // dim normal state
        transition: $budgie_transition;
        &:hover {
          background-image: image(transparent);
          background-color: transparent;
          color: $selected_fg_color;
        }
        &:active {
          color: $selected_fg_color;
          transition: $budgie_transition,
                      background-image 0s;
          animation: budgie_ripple_effect 0.3s $slope_slow forwards;
        }
        &:checked {
          background-image: image(transparent);
          background-color: transparent;
          color: $selected_fg_color;
          box-shadow: inset #{$_line} $selected_bg_color;
        }
      }
    }
  }
}

// notifications
.budgie-notification-window,
.budgie-osd-window {
  border-radius: 2px;
  background-color: transparent;

  // draw actual backgrounds
  .drop-shadow { background-color: gtkopacity($inverted_dark_color, 0.9); }
}

.budgie-notification,
.budgie-osd {
  // always use dark-variant
  color: $inverted_fg_color;
  background-color: transparent;

  .notification-title {
    color: $inverted_secondary_fg_color;
    font-size: 110%;
    font-weight: 500;
  }

  .notification-body {
    color: $inverted_fg_color;
    font-size: 90%;
    font-weight: 400;
  }

  .budgie-osd-text {
    color: $inverted_fg_color;
    font-size: 110%;
  }

  progressbar { // mimic level-bar
    min-height: 4px;
    padding: 2px;
    border-radius: 2px;
    background-color: $inverted_dark_color;
    box-shadow: $z-depth-1;

    trough {
      color: $inverted_fg_color;
      background-color: $track_color;
    }

    progress { background-color: $success_color; }
  }
}

.budgie-notification,
.budgie-osd,
.drop-shadow {
  button,
  .linked > button { // OSD-style buttons
    border-image: none; // hide underlines
    color: $inverted_secondary_accent_label_color;
    &:hover,
    &:active,
    &:checked { color: $inverted_accent_label_color; }
    &:disabled { color: gtkopacity($inverted_accent_label_color, 0.4); }
  }
}

// alt-tab apps switcher styling
$min_child_width: 60px;
$min_spacing: 6px;
$max_childs: 8;

window.budgie-switcher-window {
  border-radius: 2px;
  background-color: transparent;

  // draw actual backgrounds and shadows
  .drop-shadow {
    margin: 8px 8px 16px; // reserve area for shadows
    border-radius: 2px;
    background-color: gtkopacity($inverted_dark_color, 0.9);
    box-shadow: $z-depth-4; // raise to level-4

    label.budgie-switcher-title { // bottom label for app titles
      // default max_children_per_line = 8
      // keep the minimum width defined by tabswitcher.ui
      min-width: ($min_child_width + $min_spacing) * $max_childs
                 + $min_spacing * ($max_childs - 1);
      // prepare for tall and dense fonts
      min-height: 13.3px * 2; // use non-scaling unit
      color: $inverted_accent_label_color;
      font-weight: 500;
      &:dir(ltr) { padding: 0 0 0 6px; }
      &:dir(rtl) { padding: 0 6px 0 0; }
    }
  }

  flowbox > flowboxchild { // icon-tiles
    margin: $min_spacing / 2;
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    color: $inverted_secondary_accent_label_color;
    background-color: transparent;
    &:hover,
    &:active {
      background-color: gtkopacity($accent_color, 0.1);
      color: $inverted_accent_label_color;
    }
    &:selected { // use the same values with Gnome-Shell
      background-color: gtkopacity($accent_color, 0.25);
      color: $inverted_accent_label_color;
      -gtk-icon-filter: brightness(1.2);
      &:disabled {
        background-color: gtkopacity($inverted_fg_color, 0.1);
        -gtk-icon-filter: opacity(0.5);

        &, label { color: $insensitive_inverted_fg_color; }
      }
    }
  }
}

// an internal of the parent switcher-window
.budgie-switcher {
}

// run-dialog styling
.background.csd.budgie-run-dialog {
  border-radius: 2px;
  border: none;
  background-color: gtkopacity($inverted_dark_color, 0.9);

  scrolledwindow {
    border-image: none; // remove underline indicator
    background-color: transparent;

    list {
      background-color: transparent;

      row.activatable {
        background-color: transparent;
        color: $inverted_secondary_fg_color;
        transition: none;

        .dim-label {
          color: $inverted_secondary_fg_color;
          opacity: 1.0;
        }

        &:hover,
        &:active {
          color: $inverted_fg_color;

          .dim-label {
            color: $inverted_fg_color;
            opacity: 1.0;
          }
        }
      }
    }
  }

  box > box {
    entry {
      min-height: rem($widget_size, $sw: 1.0);
      min-width: $icon_size * 25;
      color: $inverted_fg_color;
      caret-color: $inverted_fg_color;
      font-size: 110%;
      &:focus {
        color: $selected_fg_color;
        caret-color: $selected_fg_color;
      }
      &:disabled { color: $insensitive_inverted_fg_color; }

      image {
        &:not(:hover):not(:active) { color: $inverted_fg_color; }
        &:active { color: $selected_bg_color; }
        &:disabled { color: $insensitive_inverted_fg_color; }
      }
    }
  }

  scrollbar {
    border: none;
    background: none;

    slider {
      background-color: gtkopacity($inverted_tertiary_fg_color, 0.55);
      &:hover {
        background-color: gtkopacity($inverted_secondary_fg_color, 0.55);
      }
      &:active { background-color: $inverted_fg_color; }
      &:disabled { opacity: 0.4; }
    }
  }
}

// session-dialog and polkit-dialog styling
.budgie-session-dialog,
.budgie-polkit-dialog {
  border-radius: 2px;
  border-width: 0;
  // Always use dark-color of dark variant
  background-color: gtkopacity($inverted_dark_color, 0.9);
  color: $inverted_fg_color;
  font-weight: 700;

  decoration { // composite with drop-shadows
    border-radius: 2px;
    box-shadow: $z-depth-4;
    &:backdrop {
      box-shadow: $z-depth-2-backdrop;
      transition: none;
    }
  }

  entry {
    &, &:focus {
      color: $inverted_fg_color;
      caret-color: $inverted_fg_color;
    }
    &:disabled { color: $insensitive_inverted_fg_color; }
  }

  button,
  .linked > button {
    @extend %button_flat_normal;
    padding: rem(9.3px) rem(13.3px) rem(10.7px);
    border: 2px solid transparent;
    border-radius: 0;
    color: $inverted_secondary_accent_label_color;
    background-color: transparent;
    &:hover {
      @extend %button_flat_hover;
      background-color: transparent;
      color: $inverted_accent_label_color;
    }
    &:active {
      @extend %button_flat_active;
      background-color: transparent;
      color: $inverted_accent_label_color;
    }
    &:checked {
      @extend %button_flat_checked;
      background-color: transparent;
      color: $inverted_secondary_accent_label_color;
    }
    &:disabled { @include button(flat-insensitive); }

    &:first-child {
      border-radius: 0 0 0 2px;
      border-right-width: 0;
    }
    &:last-child {
      border-radius: 0 0 2px 0;
      border-left-width: 0;
    }
  }
}

// polkit-dialog specific styling
.budgie-polkit-dialog {
  .message { color: $inverted_secondary_fg_color; }

  .failure {
    color: $error_color;
    font-weight: 700;
  }
}

// raven-controller applet
.budgie-panel button.flat.raven-trigger {
  min-width: $icon_size;
  min-height: $icon_size;
  padding: 0;
  border-radius: 0;
  color: $inverted_fg_color;
  transition: $budgie_transition;
  &:hover,
  &:checked {
    background-image: image(transparent);
    background-color: transparent;
    color: $selected_fg_color;
  }
  &:active {
    color: $selected_fg_color;
    transition: $budgie_transition,
                background-image 0s;
    animation: budgie_ripple_effect 0.3s $slope_slow forwards;
  }

  .top.budgie-container &,
  .bottom.budgie-container & {
    image { margin: 0 3px; } // add internal spacing
  }

  .left.budgie-container &,
  .right.budgie-container & {
    image { margin: 3px 0; } // add internal spacing
  }
}

// misc settings
.drop-shadow {
  background-color: transparent;
  background-image: none;
  box-shadow: $z-depth-2;
}

// settings-window
window.background.budgie-settings-window.csd {
  > box.horizontal > scrolledwindow > viewport.frame { // left-pane
    &:dir(ltr) { border-right: 1px solid $borders_color; }
    &:dir(rtl) { border-left: 1px solid $borders_color; }
  }

  > box.horizontal > stack > scrolledwindow { // right-pane
    viewport.frame > box.settings-page.vertical {
      // reserve the margin for raised widget's drop-shadows
      box.settings-frame.vertical > grid.horizontal { margin-bottom: 6px; }

      // hide double-borders
      buttonbox.inline-toolbar { border-style: none none solid; }

      frame > box.vertical > overlay { // inline header
        > label.dim-label { // title
          font-size: 110%;
          font-weight: 500;
        }

        > button.popup.suggested-action.toggle { // 'plus' button
          // same goemetries with 'minus' buttons below
          min-height: 32px;
          min-width: 32px;
          margin: 8px; // prevent truncated drop-shadow
          padding: 0;
          border-radius: 100px;
          -gtk-outline-radius: 100px;
        }
      }

      frame > box.vertical list > row {
        &:dir(ltr) { padding-right: 8px + 1px; } // experimental extra 1px
        &:dir(rtl) { padding-left: 8px + 1px; }

        button.desutructive-action.round-button {
          margin: 0; // unset margin
        }
      }
    }
  }
}


// /*******************
//  * Lightdm-Greeter *
//  *******************/

%greeter_panel_window {
  background-image: image($panel_bg_color);
  color: $inverted_fg_color;
  box-shadow: none;
  font-weight: 700;
  text-shadow: none;

  &, &.background,
  > * > * { background-color: transparent; } // FIXME: ugly wildcard
}

%greeter_panel_menubar {
  @extend .gnome-panel-menu-bar;
  background-color: transparent;
  color: $inverted_fg_color;

  &:hover {
    color: $selected_fg_color;
    box-shadow: inset 0 2px $selected_bg_color;

    label,
    image { color: $selected_fg_color; }
  }
}

%greeter_panel_menubar_menuitem {
  // flip underline-indicator vertically
  padding: rem(5.3px, $sw: 1.0) 0 rem(6.7px, $sw: 1.0);
  background-color: transparent;
  &:hover { box-shadow: inset 0 2px $selected_bg_color; }
}

%greeter_panel_menu_menuitem {
  padding: rem(5.3px) rem(8px) rem(6.7px);
  font-weight: 400;
  text-shadow: none;

  &, label { color: $secondary_fg_color; }
  &:hover,
  &:hover label { color: $fg_color; }
  &:disabled,
  &:disabled label { color: $insensitive_fg_color; }
}

%non_csd_menu {
  margin: unset;
  padding: 1px;
  border-radius: 0;
  border-width: 1px;
  border-style: solid;
  border-color: $menu_highlight_color
                $solid_light_borders_color
                $solid_light_borders_color;
  background-clip: border-box;
}

// gtk-greeter
.lightdm-gtk-greeter {
  // top-panel styling
  #panel_window {
    @extend %greeter_panel_window;

    menubar {
      @extend %greeter_panel_menubar;

      label,
      image {
        padding: 0 rem(6.7px, $sw: 1.0);
        color: $inverted_fg_color;
      }

      > menuitem { @extend %greeter_panel_menubar_menuitem; }

      menu menuitem { @extend %greeter_panel_menu_menuitem; }
    }
  }

  // main container
  #login_window,
  #shutdown_dialog,
  #restart_dialog {
    @extend messagedialog;
    padding: 0;
    border-style: solid;
    border-width: 10px;
    border-radius: 2px;
    border-image: -gtk-scaled(url("assets/osd-shadow#{$asset_suffix}.png"),
                              url("assets/osd-shadow#{$asset_suffix}@2.png"))
                  10 / 10px stretch;
    box-shadow: none;

    button {
      padding: rem(9.3px, $sw: 1.0) rem(13.3px, $sw: 1.0) rem(10.7px, $sw: 1.0);
      color: $inverted_secondary_fg_color;
      &:hover,
      &:active { color: $inverted_fg_color; }
      &:disabled { color: $insensitive_inverted_fg_color; }

      &#login_button { @extend button.suggested-action; }

      &#restart_button,
      &#shutdown_button { @extend button.destructive-action; }

      &.combo {
        min-height: rem($widget_size);
        padding: 0 if($ref_weight < 1.0, 4px, 8px);
        border-image: -gtk-gradient(radial,
                                    center bottom, 0,
                                    center bottom, 0.5,
                                    to($track_color),
                                    to(transparent))
                                    0 0 1 / 0 0 1px;
        color: $inverted_fg_color;
        font-weight: 500;
        &:hover,
        &:active {
          border-image: -gtk-gradient(radial,
                                      center bottom, 0,
                                      center bottom, 0.5,
                                      to($selected_bg_color),
                                      to(transparent))
                                      0 0 2 / 0 0 2px;
          color: $selected_fg_color;
        }
        &:disabled,
        &:checked:disabled {
          border-image: -gtk-gradient(radial,
                                      center bottom, 0,
                                      center bottom, 0.5,
                                      to($track_color),
                                      to(transparent))
                                      0 0 1 / 0 0 1px;
          color: $insensitive_inverted_fg_color;
        }
      }
    }

    %greeter_entry,
    entry { // prevent junmping when showing CapsLock warning
      min-height: rem($widget_size);
      padding: 0 if($ref_weight < 1.0, 4px / 2, 8px / 2);
      font-family: monospace;
    }

    infobar.error { // notification revealer
      margin: 0 4px; // prevent unwanted overflow
      border: none;
      background-color: transparent;
      color: $error_color;
      font-weight: 700;
      font-size: 110%;
      transition: none; // transition causes visual glitches
    }
  }

  #login_window {
  }

  #content_frame { padding-bottom: 14px; }

  #buttonbox_frame {
    padding-top: 8px; // reserve gap between infobar and buttonbox
  }

  // non-CSD context menus
  window.background.popup > menu { @extend %non_csd_menu; }
}

// slick-greeter
$greeter_panel_height: 32px; // pixmap height
$greeter_panel_shadow: 11px; // pixmap shadow region

window.background.lightdm {
  // top-panel
  menubar {  // broken
    @extend %greeter_panel_menubar;
    padding-top: ($greeter_panel_height - $greeter_panel_shadow - $icon_size)
                 / 2;
    background-color: gtkalpha($panel_bg_color, 1.0); // does not work
    font-weight: 700;
    text-shadow: none;

    > menuitem {
      @extend %greeter_panel_menubar_menuitem;
      padding: 0 rem(6.7px, $sw: 1.0);

      label,
      image { color: $inverted_fg_color; }

      &:hover {
        box-shadow: inset 0 2px $selected_bg_color;

        label, // does not work?
        image { color: $selected_fg_color; }
      }

      label { margin: 0 2px rem(1.3px, $sw: 1.0); }
    }
  }

  window.background.popup > menu {
    @extend %non_csd_menu;

    menuitem  { @extend %greeter_panel_menu_menuitem; }
  }

  button {
    &:not(.option-button):not(.toggle-button) {
      padding: rem(6.7px, $sw: 1.0);
      border-radius: 100px;
      -gtk-outline-radius: 100px;
    }

    &.flat.option-button { // session logo button
      padding: rem(6.7px, $sw: 1.0);
      border-radius: 100px;
      -gtk-outline-radius: 100px;
      color: $inverted_fg_color;

      image { opacity: 0.75; }

      &:hover,
      &:active {
        color: $selected_fg_color;

        image { opacity: 1.0; }
      }
    }

    &, // back arrow
    &.toggle-button { // session list rows
      @extend %button_flat_normal;
      padding: rem(10px) rem(13.3px);
      border-radius: 0;
      -gtk-outline-radius: 0;
      background-color: transparent;
      color: $inverted_fg_color;
      font-size: 110%;
      font-weight: 500;

      label { padding-bottom: rem(1.3px, $sw: 1.0); }

      image { opacity: 0.75; }

      &:hover,
      &:active,
      &.selected {
        image { opacity: 1.0; }
      }

      &:hover {
        @extend %button_flat_hover;
        background-color: transparent;
        color: $selected_fg_color;
      }
      &:active {
        @extend %button_flat_active;
        background-color: transparent;
        color: $selected_fg_color;
      }
      &.selected {
        @extend %button_flat_normal;
        background-image: image($selected_bg_color);
        &, &:hover {
          color: $selected_fg_color;

          image { opacity: 1.0; }
        }
      }
    }
  }

  entry,
  .lightdm-combo entry {
    @extend %greeter_entry;
    &,
    &:focus {
      color: $inverted_fg_color;
      caret-color: $inverted_fg_color;
    }
    &:disabled { color: $insensitive_inverted_fg_color; }
  }

  entry:active { // for spinner
    -gtk-icon-source: linear-gradient(to bottom,
                                      transparent 50%,
                                      $solid_red 50%,
                                      $solid_red calc(50% + 2px),
                                      transparent calc(50% + 2px),
                                      transparent 100%);
    animation: colorful_bar 2s linear infinite;
  }

  .lightdm-combo {
    border-radius: 0;
    background-color: transparent;
  }
}


// /************
//  * Corebird *
//  ************/

// use normal foreground colour
stack button.profile-button {
  &:checked { color: $fg_color; }
}

headerbar.titlebar box {
  button.toggle.account-button { // left-most account-button
    min-width: $icon_size;
    min-height: $icon_size;
    // it doesn't work
    padding: rem(6.7px) rem(10.7px) rem(6.7px);
    // revert to square button since we can't make perfect circle button
    border-radius: 2px;
    -gtk-outline-radius: 2px;

    // it doesn't work
    .avatar-round { border-color: transparent; }
  }

  button.image-button.toggle { // tweet button
    min-width: $icon_size * 1.5;
    min-height: $icon_size * 1.5;
    padding: if($ref_weight < 1.0,
             rem(($widget_size - $icon_size * 1.5 - 2px) / 2),
             rem(($widget_size - $icon_size * 1.5) / 2));
  }
}

.background.csd box.vertical > stack > scrolledwindow,
.background.solid-csd box.vertical > stack > scrolledwindow {
  list > row.activatable.tweet {
    // speed-up scrolling
    background-image: none;
    &:hover {
      background-image: none;
      background-color: gtkalpha(currentColor, 0.05);
    }

    &,
    widget.inline-media,
    button.text-only-button {
      transition: none;
      &:active { animation: none; }

      label { transition: none; }
    }

    // dim 'quotes' inside the tweets (labels only)
    grid.horizontal.quote label {
      opacity: 0.75;

      &.dim-label { opacity: 0.4; }
    }

    // use asymmetrical separators
    &:dir(ltr) {
      border-image: linear-gradient(to right,
                                    transparent 72px,
                                    $borders_color 72px,
                                    $borders_color)
                                    0 0 1 / 0 0 1px;
    }
    &:dir(rtl) {
      border-image: linear-gradient(to left,
                                    transparent 72px,
                                    $borders_color 72px,
                                    $borders_color)
                                    0 0 1 / 0 0 1px;
    }
  }
}

scrolledwindow > viewport.frame > list {
  > stack > box.vertical > button.text-button { // 'Retry' button
    margin-bottom: rem(13.3px, $sw: 1.0);
  }
}

// top-right 'close' button on attached images
window.background > grid.horizontal > widget,
window.background > stack > grid.horizontal > widget {
  > button.close-button.image-button {
    // disabled box-shadow by hard-coded style.css
    @extend button.destructive-action;
  }
}

// popup window for media
window.background:not(.csd):not(.solid-csd):not(.unity-csd) > frame {
  > scrolledwindow {
    > scrollbar { // always draw troughs
      background-color: gtkopacity($base_color, 0.55);

      &.overlay-indicator {
        &:not(.dragging):not(.hovering) {
          background-color: gtkopacity($base_color, 0.55);
        }
      }
    }
  }
}

window.background > popover.background > frame > list > row.activatable {
  > grid.horizontal > button.flat.image-button {
    // revive transitions
    transition-property: opacity,
                         border-color,
                         border-image,
                         background-color,
                         background-image,
                         box-shadow,
                         icon-shadow;
    transition-timing-function: $slope_slow;
    transition-duration: 0.2s;
  }
}

window.background:not(.csd):not(.solid-csd) > overlay {
  > box.nobg.osd > revealer > button { // back/forward buttons
    @extend button.osd.image-button;
    min-width: $icon_size * 1.5;
    min-height: $icon_size * 1.5;
  }
}


// /********
//  * Nemo *
//  ********/

.nemo-desktop.nemo-canvas-item {
  @extend .nautilus-desktop.nautilus-canvas-item;
}

.nemo {
  &-canvas-item { @extend .nautilus-canvas-item; }

  &-list-dim-label { @extend .nautilus-list-dim-label; }
}

.nemo-window {
  // workaround for invisible text in rename entry (Eeleditable.entry)
  .nemo-window-pane scrolledwindow widget > widget.entry {
    &, &:focus {
      transition: none;

      &:selected { // FIXME: selection node doesn't work?
        color: $selected_fg_color;
        background-color: $selected_bg_color;
      }
    }
  }

  infobar.error { // Administrative privileges
    label {
      font-size: 110%;
      font-weight: 700;
    }
  }

  // main tool-bar styling
  grid > box > box > toolbar.primary-toolbar {
    // draw bottom border and shadows
    border-bottom: 1px solid $borders_color;
    box-shadow: if($variant == 'light', $toolbar-shadow-light,
                                        $toolbar-shadow-dark);

    > button.flat.toggle { // 'back/forward'?
      min-height: $icon_size * 2.0;
      min-width: $icon_size * 2.0;
      padding: 0;
      border-radius: 2px;
      -gtk-outline-radius: 2px;
    }

    .linked.raised > button,
    .raised > button {
      // path-bar widget buttons
      &, &.text-button.toggle {
        min-height: rem(26.7px);
        min-width: rem(26.7px);
        padding-top: 0;
        padding-bottom: 0;
        border-radius: 2px;
        -gtk-outline-radius: 2px;

        > widget { padding: rem(4px) 0; } // GtkArrow?
      }

      &.image-button,
      &.image-button.toggle {
        min-height: $icon_size * 2.0;
        min-width: $icon_size * 2.0;
        padding: 0;
        border-radius: 2px;
        -gtk-outline-radius: 2px;
      }
    }

    // optional buttons
    .raised:not(.linked) > button {
      &:not(.text-button):not(.toggle) {
        min-height: $icon_size * 2.0;
        min-width: $icon_size * 2.0;
        padding: 0;
        border-radius: 2px;
        -gtk-outline-radius: 2px;
      }
    }

    // shrink height of entry node
    box.horizontal > widget > entry,
    button.text-button {
      padding-top: rem(5.3px);
      padding-bottom: rem(6.7px);
    }
  }

  // tweak notebook colour
  grid > paned > box > paned > box > notebook {
    &, > box > stack:not(:only-child) {
      background-color: $base_color;
    }
  }

  // remove double-border
  grid.vertical > paned.horizontal > box.vertical {
    > scrolledwindow.frame {
      border-width: 0;
    }
  }

  // force using flat-style on bottom bar
  grid.vertical > widget {
    background-color: $secondary_dark_color;
    box-shadow: if($variant=='light', $inline-shadow-light,
                                      $inline-shadow-dark);

    > box { padding: rem(2.7px); }

    > box > button.image-button {
      @extend %button_flat_normal;
      min-width: rem(13.3px);
      min-height: rem(29.3px);
      border-radius: 2px;
      -gtk-outline-radius: 2px;
      padding: 0 rem(10px) 0;
      border-image: radial-gradient(circle farthest-corner at center,
                                    $track_color 0%,
                                    transparent)
                                    0 0 0 / 0 0 0px;
      background-color: transparent;
      color: $secondary_fg_color;
      &:hover {
        @extend %button_flat_hover;
        border-image: none;
        background-color: transparent;
        color: $fg_color;
      }
      &:checked {
        @extend %button_flat_checked;
        border-image: radial-gradient(circle farthest-corner at center,
                                      $selected_bg_color 100%,
                                      transparent)
                                      0 0 2 / 0 0 2px;
        background-color: transparent;
        color: $fg_color;
        &:disabled {
          @extend %button_flat_checked_disabled;
          border-image: none;
          background-color: transparent;
          color: $insensitive_fg_color;
        }
      }
      &:disabled {
        @extend %button_flat_disabled;
        border-image: none;
        background-color: transparent;
        color: $insensitive_secondary_fg_color;
      }
    }

    box > separator.vertical { // remove separator
      min-width: 0;
      color: transparent;
      background-color: transparent;
    }
  }
}


// /************
//  * Lollypop *
//  ************/

window > headerbar > widget > box.horizontal {
  > grid.horizontal > button.toggle.image-button {
    min-width: $icon_size * 1.5;
    min-height: $icon_size * 1.5;
    padding: if($ref_weight < 1.0,
             rem(($widget_size - $icon_size * 1.5 - 2px) / 2),
             rem(($widget_size - $icon_size * 1.5) / 2));
  }

  > button.image-button {
    min-width: $icon_size * 1.5;
    min-height: $icon_size * 1.5;
    margin: -2px 0;
    padding: if($ref_weight < 1.0,
             rem(($widget_size - $icon_size * 1.5 - 2px) / 2),
             rem(($widget_size - $icon_size * 1.5) / 2));
  }
}

// left-pane styling
window.background > grid.vertical > stack > paned.horizontal > widget {
  grid.vertical > scrolledwindow {
    background-color: $secondary_dark_color;

    &:dir(ltr) {
      box-shadow: if($variant == 'light', $sidebar-light-ltr,
                                          $sidebar-dark-ltr);
    }
    &:dir(rtl) {
      box-shadow: if($variant == 'light', $sidebar-light-rtl,
                                          $sidebar-dark-rtl);
    }

    > treeview.view.sidebar {
      background-color: transparent;
      font-weight: 500;
    }
  }
}

// playlists styling
window.background > grid.vertical > stack > paned.horizontal {
  > paned.horizontal > grid grid > grid {
    button.flat.image-button { // back to square button
      &, &.toggle {
        border-radius: 2px;
        -gtk-outline-radius: 2px;
      }
    }
  }
}

row.trackrow {
  &, &playing {
    // lollypop can not understand outer marigns
    button.image-button:not(.text-button) { margin: 0; }
  }
}

.track-menu-button { // back to square button
  border-radius: 2px;
  -gtk-outline-radius: 2px;
}


// /***************************
//  * Cinnamon-Control-Center *
//  ***************************/

window.background:not(.csd) > box.vertical {
  > stack > scrolledwindow > viewport,
  > scrolledwindow > viewport {
    iconview {
      &, &.view {
        background-color: transparent;
        &:selected {
          color: $selected_fg_color;
          background-color: $selected_bg_color;

          label { color: $selected_fg_color; }
        }
      }
    }

    box.vertical > toolbar {
      border: none;
      background-color: $bg_color;
      box-shadow: none;

      *:not(button) > label {
        padding: rem(5.3px, $sw: 1.0);
        color: $tertiary_fg_color;
      }
    }

    box.vertical > list {
      &, > row {
        background-image: none;
        background-color: $base_color;
        transition-duration: 0s;
        &:hover,
        &:active { // unset hover/active effects
          background-image: none;
          background-color: transparent;
          transition-duration: 0s;
          animation: none;
        }
        &:selected {
          background-color: $selected_bg_color;
          color: $selected_fg_color;
        }
      }
    }
  }
}


// /************************
//  * Cinnamon-Screensaver *
//  ************************/

.csstage {
  .unlockbox {
    color: $inverted_fg_color;
    font-size: 110%;
    font-weight: 400;
  }

  .clock {
    color: $inverted_fg_color;
    font-size: rem(112px, $sw: 1.0);
    font-weight: 300;
  }

  .toppanel {
    border: none;
    color: $inverted_fg_color;
    background-color: transparent;
  }

  .audiopanel,
  .infopanel { // OSDs placed at top-left/right corners
    border: none;
    background-color: gtkopacity($inverted_dark_color, 0.9);
    box-shadow: $z-depth-1;

    &:not(.infopanel) { border-radius: 0 0 2px 0; }
    &:not(.audiopanel) { border-radius: 0 0 0 2px; }
  }

  .notificationwidget,
  .powerwidget {
    padding: 6px;
    color: $inverted_fg_color;
    background-color: transparent;
    font-size: 100%;
    font-weight: 500;
  }

  .auth-message {
    color: $error_color;
    font-size: 90%;
    font-weight: 700;
  }

  .caps-message {
    color: $warning_color;
    font-size: 90%;
    font-weight: 700;
  }

  .framedimage { // avatar?
    min-height: 150px;
    border-radius: 2px;
    border: none;
    background-color: gtkopacity($inverted_fg_color, 0.1);
  }

  .passwordentry {
    @include entry(flat-normal);
    border-radius: 0;
    color: $inverted_secondary_fg_color;
    caret-color: $inverted_secondary_fg_color;
    font-family: monospace;
    &:focus {
      @include entry(flat-focus);
      color: $inverted_fg_color;
      caret-color: $inverted_fg_color;
    }
    &:disabled {
      @include entry(flat-insensitive);
      color: $insensitive_inverted_fg_color;
    }
    &:backdrop { // for alt-text keyboard layout?
      color: $selected_bg_color;
    }

    image.left {
      margin-right: 8px;
      color: inherit;
    }
  }

  .transparentbutton { // = 'unlock'/'switch-user' button
    @extend %button_flat_normal;
    border: none;
    background-color: transparent;
    &:not(:active):not(:disabled):not(hover) {
      background-color: transparent;
      color: $secondary_accent_color;
    }
    &:hover {
      @extend %button_flat_hover;
      background-color: transparent;
      color: $accent_color;
    }
    &:active {
      @extend %button_flat_active;
      border-image: none;
      background-color: transparent;
      color: $accent_color;
      box-shadow: none;
    }
    &:checked {
      @extend %button_flat_checked;
      border-image: none;
      background-color: transparent;
      color: $accent_color;
      box-shadow: none;
    }
    &:disabled {
      @extend %button_flat_disabled;
      background-color: gtkopacity($inverted_secondary_fg_color, 0.1);
      color: gtkopacity($inverted_secondary_fg_color, 0.4);

      label,
      image { color: inherit; }
    }
  }

  .volumeslider {
    min-height: 24px;
    min-width: 100px;
    padding: 3px 0px;
    background-color: gtkopacity($inverted_fg_color, 0.2);
    color: $success_color;
    &:disabled { background-color: gtkopacity($success_color, 0.2); }
  }

  .trackname {
    font-size: 90%;
    color: $inverted_secondary_fg_color;
    background-image: none;
    background-color: transparent;
  }

  .albumartist {
    font-size: 80%;
    color: $insensitive_inverted_fg_color;
    background-image: none;
    background-color: transparent;
  }

  viewport {
    &,
    &.frame {
      border-style: none;
      background-color: transparent;
      background-image: none;
    }
  }
}


// /*********
//  * XFce4 *
//  *********/

.XfceHeading {
  margin: 0;
  padding: 0;
  border-width: 0;
  background-image: none;
  background-color: $bg_color;
  color: $fg_color;
  text-shadow: none;
}

.xfce4-panel,
.xfce4-panel.background {
  &, // unset borders
  frame > border { border: 0 none transparent; }

  background-color: $panel_bg_color;
  color: $inverted_fg_color;
  font-weight: 700;
  text-shadow: none;
  -gtk-icon-shadow: none;

  // dashed outline indicator?
  // default -> 1px dashed #ff0000;
  &.marching-ants { border: 1px dashed $destructive_color; }

  button {
    padding: 0 4px;
    border: none;
    border-radius: 0;
    background-color: transparent;
    background-image: none;
    color: $inverted_fg_color;
    font-weight: 700;
    transition: none;
    &:hover {
      background-color: transparent;
      background-image: none;
      color: $selected_fg_color;
      box-shadow: inset 0 -2px $track_color;
      transition: none;
    }
    &:active,
    &:checked,
    &:hover:checked,
    &:disabled:checked { // 'checked' = 'active'
      background-color: transparent;
      background-image: none;
      color: $selected_fg_color;
      box-shadow: inset 0 -2px $selected_bg_color;
      transition: none;
      animation: none;
    }
    &:active {
      &, &:hover { background-color: gtkopacity($inverted_fg_color, 0.1); }
    }
  }

  menu {
    font-weight: 400; // for enforcing regular weight
    text-shadow: none;
    -gtk-icon-filter: none;
  }
}


// /**************
//  * FeedReader *
//  **************/

window.background > paned.titlebar > headerbar.titlebar {
  button.flat {
    // FIXME: when developer will use .image-button class?
    &:not(.titlebutton):not(.image-button):not(.text-button):not(.toggle) {
      min-width: $icon_size - 2px;
      min-height: $icon_size - 2px;
      margin: rem(5.3px + 2px) 0;
      padding: 0 rem(($widget_size - $icon_size - 2px) / 2);
    }
  }
}

// left-paned haederbar
paned.headerbar_pane.titlebar > headerbar.header_right.titlebar {
  > box.linked.raised > button.toggle { // should be .text-button
    // back to square buttons
    border-radius: 2px;
    -gtk-outline-radius: 2px;
  }
}

// hide unneeded spinner
overlay.article-list > stack > box.horizontal {
  spinner {
    &,
    &:checked,
    &:checked:disabled,
    &:checked:backdrop {
      opacity: 0; // makes no sense here
    }
  }
}

// article-list
overlay.article-list > stack {
  > scrolledwindow > viewport.frame > list {
    background-color: $bg_color;

    > row.activatable {
      &:hover { background-color: gtkalpha(currentColor, 0.1); }
      &:selected {
        &,
        &:focus {
          background-color: gtkopacity($selected_bg_color, 0.2);
          &:dir(ltr) { box-shadow: inset 4px 0 $selected_bg_color; }
          &:dir(rtl) { box-shadow: inset -4px 0 $selected_bg_color; }

          label {
            &,
            &.headline-read,
            &.preview { color: $fg_color; }
          }
        }
      }
    }
  }
}

revealer > widget > headerbar.imageOverlay.titlebar {
  > box > button.close.titlebutton { // non-CSD inline-headerbar
    min-width: $icon_size * 1.5;
    min-height: $icon_size * 1.5;
    padding: if($ref_weight < 1.0,
             rem(($widget_size - $icon_size * 1.5 - 2px) / 2),
             rem(($widget_size - $icon_size * 1.5) / 2));
  }
}


// /************
//  * Synaptic *
//  ************/

window > box.vertical > box.horizontal {
  > toolbar {
    background-color: transparent;
    box-shadow: none;

    toolitem > box {
      label,
      entry {
        min-height: rem(13.3px);
        padding-top: rem(1.3px);
        padding-bottom: rem(1.3px);
        font-size: 90%;
      }

      > label { color: $insensitive_fg_color; }
    }
  }

  > widget { background-color: transparent; }
}


// /**********************
//  * Eclipse/SWT (neon) *
//  **********************/

window.background:not(.solid-csd) > box.vertical {
  > scrolledwindow widget > toolbar {
    box-shadow: none; // remove inline-shadows

    button { // hard-coded crazy zero-padding
      min-height: if($ref_weight < 1.0, $icon_size * 1.5, $icon_size * 1.75);
      min-width: if($ref_weight < 1.0, $icon_size * 1.5, $icon_size * 1.75);
      margin: 2px 0;
      border-radius: 2px;
      -gtk-outline-radius: 2px;
    }

    separator { margin: 2px 0; }
  }

  > scrolledwindow > widget > widget {
    border-width: 0 0 1px;
    border-style: none none solid;
    border-color: transparent transparent $solid_light_borders_color;
  }

  scrolledwindow widget > widget > entry {
    // internal padding is still alive in Gtk+3!?
    // any ideas how they develop their UIs...
    padding-top: 0;
    padding-bottom: 0;
  }

  widget > frame > widget > widget > scrolledwindow > textview {
    // override hard-coded crazy rgb(0,0,0)
    text { background-image: image($base_color); }
  }

  scrolledwindow widget > widget {
    > checkbutton check,
    > radiobutton radio { // disable ripple animations
      &:hover,
      &:active,
      &:hover:checked,
      &:hover:indeterminate { animation: none; }
    }
  }
}


// /*************
//  * Gnome-Mpv *
//  *************/

// control-bar styling
.background.csd > box.vertical > box.background.horizontal,
.background.solid-csd > box.vertical > box.background.horizontal {
  padding: rem(2.7px);

  button {
    min-width: if($ref_weight < 1.0, $icon_size * 1.8,
                                     $widget_size);
    min-height: if($ref_weight < 1.0, $icon_size * 1.8,
                                      $widget_size);
    margin-left: rem(2.7px);
    margin-right: rem(2.7px);
    padding: 0;
  }

  scale {
    margin-left: rem(2.7px);
    margin-right: rem(2.7px);
  }
}


// /***********
//  * Firefox *
//  ***********/

// FIXME: Gtk+3 firefox needs this!
window.background:not(.solid-csd) {
  > window.background > menu {
    // revert to standard separators
    separator { color: $borders_color; }

    > menuitem > radio:checked {
      -gtk-icon-source: -gtk-scaled(
                        url("assets/radio-checked#{$asset_suffix}.png"),
                        url("assets/radio-checked#{$asset_suffix}@2.png"));
    }
  }

  > widget {
    > frame,
    > separator { color: $borders_color; }

    > button > button:not(.flat) {
      // enforce fallback buttons inside the HTML pages
      @extend %button_fallback_normal;
      &:hover { @extend %button_fallback_hover; }
      &:active,
      &:checked { @extend %button_fallback_active; }
      &:disabled { @extend %button_fallback_insensitive; }
      &:checked:disabled {
        @extend %button_fallback_checked_insensitive;
      }
    }

    > entry {
      // enforce fallback entries inside the HTML pages
      @extend %entry_fallback_normal;
      border-radius: 2px;
      &:focus { @extend %entry_fallback_focus; }
      &:disabled { @extend %entry_fallback_insensitive; }
    }
  }
}


// /*************
//  * Wireshark *
//  *************/

window.background {
  > box.vertical > toolbar:not(.primary-toolbar).horizontal {
    border-bottom: 1px solid $borders_color;
    box-shadow: none; // hide fake-shadows
  }

  paned > notebook > box > stack > scrolledwindow.frame > widget.view {
    // transition causes missing 'selected-items'
    background-image: none;
    transition: none;
    animation: none;
  }
}


// /**************
//  * Mate-Panel *
//  **************/

// Most parts are themed in Gnome-panel section
#PanelWidget,
#PanelPlug,
#PanelApplet,
PanelToplevel.background {
  // Always use dark-color of dark variant
  color: $inverted_secondary_fg_color;
  background-color: $panel_bg_color;
  box-shadow: none;
}

PanelSeparator {
  border-width: 0;
  background: none;
  background-image: none;
  color: gtkopacity($inverted_secondary_fg_color, 0.1 * 0.55);
}

MatePanelAppletFrameDBus {
  border-style: solid;
  border-color: gtkopacity($inverted_secondary_fg_color, 0.1 * 0.55);

  &:dir(ltr) { border-width: 0 0 0 2px; }
  &:dir(rtl) { border-width: 0 2px 0 0; }
}

// 'hide' arrow buttons
PanelToplevel.mate-panel-menu-bar > grid.horizontal > button {
  @extend %button_flat_normal;
  min-height: 4px;
  min-width: 4px;
  padding: 0;
  border-radius: 0;
  border-style: solid;
  border-color: gtkopacity($inverted_secondary_fg_color, 0.1 * 0.55);
  -gtk-outline-radius: 0;
  background-color: transparent;
  color: $inverted_secondary_fg_color;
  &:hover {
    @extend %button_flat_hover;
    background-color: transparent;
    color: $inverted_fg_color;
  }
  &:active {
    @extend %button_flat_active;
    background-color: transparent;
    color: $inverted_fg_color;
  }
  &:disabled {
    @extend %button_flat_disabled;
    color: $insensitive_inverted_fg_color;
  }
  &:checked {
    @extend %button_flat_checked;
    background-color: transparent;
    color: $inverted_fg_color;
  }

  > image {
    padding: 0 rem(4px, $sw: 1.0);
  }

  &:first-child {
    &:dir(ltr) { border-width: 0 1px 0 0; }
    &:dir(rtl) { border-width: 0 0 0 1px; }
  }
  &:not(:first-child) {
    &:dir(ltr) { border-width: 0 0 0 1px; }
    &:dir(rtl) { border-width: 0 1px 0 0; }
  }
}

.mate-panel-menu-bar menubar,
#PanelApplet-window-menu-applet-button {
  background-color: transparent;

  // same value with Gnome-panel
  > menuitem { padding: 0 rem(4px, $sw: 1.0); }
}

// Brisk-Menu applet
.mate-panel-menu-bar button.flat.toggle {
  &.brisk-button {
    padding: 0 rem(4px, $sw: 1.0);
    border-radius: 0;
    -gtk-outline-radius: 0;
    background-image: none;
    background-color: transparent;
    color: $inverted_secondary_fg_color;
    font-weight: 700;
    &:hover {
      background-image: none;
      color: $inverted_fg_color;
      box-shadow: inset 0 -2px $track_color;
    }
    &:active { animation: none; }
    &:checked {
      background-image: none;
      color: $inverted_fg_color;
      box-shadow: inset 0 -2px $selected_bg_color;
    }
  }

  // vertical panel mode?
  &.brisk-button-vertical { padding: 0; }
}

.brisk-menu {
  .categories-list { // left-pane
    button.flat {
      padding-top: unset;
      padding-bottom: unset;
      border-radius: 0; // remove roundness
      -gtk-outline-radius: 0;
      font-weight: 500;
      transition-duration: 0.1s; // shorter duration
      // almost covers :hover pseudo-class
      &:checked {
        background-color: transparent;
        color: $selected_bg_color;
      }

      image { padding: rem(8px) 0; }
      // for finer base-lines
      label { padding-bottom: rem(0.7px); }
    }
  }

  // hide separator above session-buttons
  box.vertical > box.horizontal > box.vertical > separator.horizontal {
    min-height: 0;
    background-color: transparent;
  }

  .apps-list { // right-pane
    background-color: $base_color;

    row.activatable > button.flat {
      padding-top: unset;
      padding-bottom: unset;
      border-radius: 0; // remove roundness
      -gtk-outline-radius: 0;
      font-weight: 400;
      transition: none; // needs quicker response

      // set vertical padding with icon's padding
      > box.horizontal > image { padding: rem(5.3px) 0; }
    }
  }
}

.mate-panel-applet-slider {
  background-color: transparent;

  frame { // draw actual widget
    border-width: 1px;
    border-style: solid;
    border-color: $menu_highlight_color transparent transparent;
    border-radius: 2px;
    background-color: $secondary_base_color;

    // unset borders
    *,
    > border { border: unset; }
  }
}


// /*****************
//  * Mate-Terminal *
//  *****************/

.mate-terminal {
  notebook > box > header.top { // show drop-shadows
    background-color: $inverted_bg_color;
    box-shadow: inset 0 2px 2px -3px rgba(0, 0, 0, 0.26),
                inset 0 5px 3px -5px rgba(0, 0, 0, 0.39),
                inset 0 -1px $borders_color;

    tab.reorderable-page {
      &:hover {
        background-color: $inverted_base_color;
        box-shadow: inset 0 2px 2px -3px rgba(0, 0, 0, 0.26),
                    inset 0 5px 3px -5px rgba(0, 0, 0, 0.39),
                    inset 0 -1px $borders_color;
      }
      &:checked {
        background-color: $inverted_base_color;
        box-shadow: -1px 0 2px rgba(0, 0, 0, 0.02),
                    -1px 0 4px rgba(0, 0, 0, 0.03),
                    1px 0 2px rgba(0, 0, 0, 0.02),
                    1px 0 4px rgba(0, 0, 0, 0.03),
                    inset 0 2px 2px -3px rgba(0, 0, 0, 0.26),
                    inset 0 5px 3px -5px rgba(0, 0, 0, 0.39),
                    inset 0 -1px $borders_color;
      }
    }

    tab {
      label { color: $inverted_tertiary_fg_color; }
      &:hover label,
      &:checked label { color: $inverted_fg_color; }

      button {
        &,
        image { color: $inverted_tertiary_fg_color; }
      }

      &:hover button,    // hover tab close button
      &:checked button { // active tab close button
        &,
        image { color: $inverted_fg_color; }
      }
    }

    tabs > arrow {
      color: $inverted_tertiary_fg_color;
      &:hover,
      &:active { color: $inverted_fg_color; }
      &:disabled { color: $insensitive_inverted_secondary_fg_color; }
    }
  }

  scrollbar {
    background-color: $inverted_dark_color;

    slider { // always use dark variant
      background-color: gtkopacity($inverted_tertiary_fg_color, 0.55);
      &:hover { background-color: gtkopacity($inverted_secondary_fg_color, 0.55); }
      &:active { background-color: $inverted_fg_color; }
      &:disabled { opacity: 0.4; }
    }
  }
}


// /********
//  * Caja *
//  ********/

.caja-desktop { // desktop icon-grid styling
  &.caja-canvas-item { @extend .nautilus-desktop.nautilus-canvas-item; }

  > widget.entry { // = EelEditableLabel.entry
    &, &:focus {
      transition: none;

      &:selected { // FIXME: selection node doesn't work?
        color: $selected_fg_color;
        background-color: $selected_bg_color;
      }
    }
  }
}

.caja-navigation-window {
  // side-panel styling
  .caja-side-pane {
    scrolledwindow {
      background-color: $secondary_dark_color;
      &:dir(ltr) {
        box-shadow: if($variant == 'light', $sidebar-light-ltr,
                                            $sidebar-dark-ltr);
      }
      &:dir(rtl) {
        box-shadow: if($variant == 'light', $sidebar-light-rtl,
                                            $sidebar-dark-rtl);
      }

      treeview.view {
        background-color: transparent;
        &:selected {
          background-color: $selected_bg_color;
          color: $selected_fg_color;
        }
      }
    }

    notebook {
      border-top: 1px solid $borders_color;

      .frame { border: none; }
    }

    button.flat:last-child { // 'close' button on header
      min-width: $icon_size;
      min-height: $icon_size;
      padding: rem(10.7px);
      border-radius: 100px;
      -gtk-outline-radius: 100px;
    }
  }

  // main toolbar styling
  toolbar.primary-toolbar {
    border-bottom: 1px solid $borders_color;
    box-shadow: if($variant == 'light', $toolbar-shadow-light,
                                        $toolbar-shadow-dark);

    button { // uniform button sizes
      min-width: $icon_size * 1.5;
      min-height: $icon_size * 1.5;
      padding: rem(4px);
    }
  }

  // path-bar styling
  .caja-pathbar {
    button {
      &:first-child { // remove meaningless gaps
        &:dir(ltr) { margin-right: -2px; }
        &:dir(rtl) { margin-left: -2px; }
      }
      &:not(:first-child):not(:last-child) {
        margin: 0 -2px;
      }
      &:last-child {
        &:dir(ltr) { margin-left: -2px; }
        &:dir(rtl) { margin-right: -2px; }
      }

      &.toggle,
      &.image-button,
      &.text-button,
      &.slider-button { // enforce square buttons
        border-radius: 2px;
        -gtk-outline-radius: 2px;
      }

      &, &.slider-button { // use linked-array button styling
        @extend %button_flat_normal;
        @extend %button_array;
        &:hover {
          @extend %button_flat_hover;
          @extend %button_array:hover;
        }
        &:active {
          @extend %button_flat_active;
          @extend %button_array:active;
        }
        &:disabled {
          @extend %button_flat_disabled;
          @extend %button_array:disabled;
        }
        &:checked {
          @extend %button_flat_checked;
          @extend %button_array:checked;
        }
      }
    }
  }

  button.image-button.toggle { // most-left toggle button in path-bar pane
    @include button(flat-normal);
    @extend %image_button;
    &:hover { @include button(flat-hover); }
    &:active { @include button(flat-active); }
    &:disabled { @include button(flat-insensitive); }
    &:checked { // use underline-indicator
      @include button(flat-checked);
      border-radius: 0;
      -gtk-outline-radius: 0;
      background-image: none;
      background-color: transparent;
      box-shadow: inset 0 -2px $selected_bg_color;
    }
  }

  .caja-notebook { // remove lateral borders
    &, .frame {
      border-width: 1px 0 1px;
    }

    > box > header.top { // revive top-border when tabs are shown
      border-top: 1px solid $borders_color;
      background-color: $secondary_dark_color;
      box-shadow: if($variant == 'light', $inline-shadow-light,
                                          $inline-shadow-dark);
    }
  }

  statusbar {
    margin: 0 -10px; // hide weird lateral gaps
    padding: 0 rem(6.7px);
    background-color: $secondary_dark_color;
    box-shadow: if($variant == 'light', $inline-shadow-light,
                                        $inline-shadow-dark);
  }

  // workaround for invisible text in rename entry
  scrolledwindow widget > widget.entry {
    &, &:focus {
      transition: none;

      &:selected { // FIXME: selection node doesn't work?
        color: $selected_fg_color;
        background-color: $selected_bg_color;
      }
    }
  }
}

#caja-extra-view-widget {
  border-bottom: 1px solid $borders_color;
  background-color: $bg_color; // needs overriding

  > box > box > label { font-weight: 700; }
}


// /********************
//  * Mate-Screensaver *
//  ********************/

.lock-dialog {
  @extend messagedialog;
  border-radius: 2px;
  border: 1px solid gtkopacity($inverted_dark_color, 0.9);
  background-color: transparent;
  // outset-shadow does not work since decoration node wasn't implemented
  box-shadow: none;

  &.background {
    border-radius: 2px;
    background-color: gtkopacity($inverted_dark_color, 0.9);
  }

  frame { border: none; }
}


// /***********************
//  * Mate-Control-Center *
//  ***********************/

// almost out of control, and looks ugly
window#MyControlCenter > frame > box.horizontal {
  > widget > scrolledwindow.frame {
    border: none;
    // draw pane-separator with borders
    // FIXME: rendering quality is quite poor
    &:dir(ltr) { border-left: 1px solid $solid_light_borders_color; }
    &:dir(rtl) { border-right: 1px solid $solid_light_borders_color; }

    > widget.view { // content-view
      all: unset;
      background-color: $bg_color; // does not work
    }
  }
}


// /**************
//  * Mate-Tweak *
//  **************/

.background:not(.csd) > box.horizontal {
  > notebook { // right-pane
    // remove unwanted frames/borders
    &.frame {
      border: none;

      > box > stack {
        border-width: 1px;
        border-style: solid;
        border-color: $bg_color;
        box-shadow: none;
        &:dir(ltr) { border-left-color: $paned_borders_color; }
        &:dir(rtl) { border-right-color: $paned_borders_color; }
      }
    }
  }
}


// /*******
//  * Eom *
//  *******/

.eom-window {
  statusbar { // always use dark-variant
    margin: 0 -10px; // hide weird lateral gaps
    padding: 0 rem(6.7px);
    background-color: $inverted_bg_color;
    color: $inverted_fg_color;
    box-shadow: $inline-shadow-dark;
  }
}


// /*********
//  * Pluma *
//  *********/

.pluma-window {
  paned.horizontal notebook {
    > box > header.top { // revive top-border when tabs are shown
      border-top: 1px solid $borders_color;
      background-color: $secondary_dark_color;
      box-shadow: if($variant == 'light', $inline-shadow-light,
                                          $inline-shadow-dark);
    }
  }

  statusbar {
    margin: 0 -10px; // hide weird lateral gaps
    padding: 0 rem(6.7px);
    background-color: $secondary_dark_color;
    box-shadow: if($variant == 'light', $inline-shadow-light,
                                        $inline-shadow-dark);

    frame,
    .frame { border-style: none; }
  }

  // side-pane styling
  paned.horizontal box.vertical notebook {
    &.frame { border-style: solid none; }
  }

  // print-preview styling
  .pluma-print-preview toolbar.horizontal {
    border-width: 1px 0;
    border-style: solid none;
    border-color: $borders_color transparent;
    background-color: $secondary_dark_color;
    box-shadow: if($variant == 'light', $inline-shadow-light,
                                        $inline-shadow-dark);
  }
}


// /*****************
//  * Atril/Xreader *
//  *****************/

.atril-window,
.xreader-window {
  scrolledwindow.frame {
    border-style: solid none none;

    > .view { // = evview?
      transition: none;
      &:selected,
      &:active {
        background-color: $selected_bg_color;
        color: $selected_fg_color;
      }
    }
  }
}


// /*************************
//  * Mate-MediaControl-OSD *
//  *************************/

// OSDs are much blurred?
MsdOsdWindow {
  &.background.osd {
    border-radius: 2px;
    border: 1px solid gtkopacity($inverted_dark_color, 0.9);
    background-color: gtkopacity($inverted_dark_color, 0.9);
    box-shadow: none;

    // FIXME: seems images have inverted fore/back colours?
    image { color: $inverted_fg_color; }

    .trough {
      border-radius: 0;
      border: none;
      background-color: gtkopacity($inverted_fg_color, 0.2);
    }

    .progressbar {
      border-radius: 0;
      border: none;
      background-color: $success_color;
    }
  }
}


// /****************
//  * Libre-Office *
//  ****************/

window.background:not(.csd):not(.solid-csd) {
  // FIXME: still keep blocing CSDs.
  // reserved area at the most-right side of GtkMenuBar
  > grid.horizontal > grid.horizontal {
    background-color: $inverted_dark_color;

    > button.flat.small-button { // 'close' button
      color: $inverted_secondary_fg_color;
      &:hover,
      &:active,
      &:checked { color: $inverted_fg_color; }
      &:disabled { color: $insensitive_inverted_fg_color; }
    }
  }
}

window.background:not(.solid-csd) {
  // for 'Notebookbar' toolbar
  > notebook:not(.frame) {
    border: 0 none transparent; // unset borders
    background-color: $bg_color;

    > box > stack {
      border: none;
      background-color: $bg_color;
      box-shadow: none;
    }

    > box > header.top {
      border: 0 none transparent; // unset borders
      background-color: $bg_color;
      box-shadow: $toolbar-shadow-light,
                  inset 0 -1px $borders_color;
      @if $variant = 'dark' {
        box-shadow: $toolbar-shadow-dark,
                    inset 0 -1px $borders_color;
      }

      tabs {
        &, > tab {
          background-color: transparent;

          &, // FIXME: this does not work
          label,
          image { color: $tertiary_fg_color; }

          &:hover,
          &:checked {
            &,
            label,
            image { color: $fg_color; }
          }
        }
      }
    }
  }
}


// /************
//  * Inkscape *
//  ************/

// 1st-row toolbar
#CommandsToolbar {
  button.flat.image-button {
    border-radius: 2px;
    -gtk-outline-radius: 2px;
  }
}

// 2nd-row toolbars
box#AuxToolbox {
  border-top: 1px solid $borders_color;

  toolbar {
    min-height: rem(37.3px, $sw: 1.0);
    border: none;
    box-shadow: none;

    button.flat.image-button {
      border-radius: 2px;
      -gtk-outline-radius: 2px;
    }
  }

  box#StyleSwatch { // keep the similar height vs GtkToolBar
    margin: rem(-2.7px) 0;

    label { font-size: if($ref_weight < 1.0, 90%, 100%); }
  }
}

// left/right-side, vertical toolbars
#SnapToolbar,
#ToolToolbar {
  > button,
  > toolitem > button,
  > toolbutton > button { // revert to rectangular buttons
    min-width: rem($icon_size * 2.5);
    min-height: rem($icon_size * 2.5);
    margin: 0;
    padding: 0;
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    &:checked { // revert to Gtk+ 2.x styling
      border-image: none;
      background-color: $selected_bg_color;
      color: $selected_fg_color;
    }
  }
}

// scrolled colour-palette
#PreviewHolderScroller > viewport.frame {
  padding: 1px 0;
  border-style: solid none; // add fake border to top/bottom
  border-width: 1px 0;
  border-color: transparent;
}

// misc
box#DesktopStatusBar {
  spinbutton { // spinbuttons inside the status-bar
    margin: rem(5.3px, $sw: 1.0) 0;
  }

  combobox { margin: rem(5.3px, $sw: 1.0) 0; }
}

widget > box#DesktopMainTable {
  // stop using circular animations
  // since we can not keep the perfect square allocations
  spinbutton > button {
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    &:hover {
      background-color: $track_color;
      animation: none;
    }
    &:active {
      background-color: $track_color;
      transition: all 0.2s $slope_slow, background-image 0s;
      animation: flat_ripple_effect 0.3s $slope_slow forwards;
    }
  }
}

#DesktopMainTable spinbutton > entry {
  // workaround for truncated labels in GimpSpinScale
  // FIXME: need to override weird inner-padding?
  padding: 0;

  // re-fit to the parent entry node spacing
  > progress > trough > progress { margin: 0; }
}

#InkscapePanel box#PanelContents button {
  &.toggle,
  &.radio {
    min-width: rem($icon_size * 2.5);
    min-height: rem($icon_size * 2.5);
    margin: 0;
    padding: 0;
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    &:checked { // revert to Gtk+ 2.x styling
      border-image: none;
      background-color: $selected_bg_color;
      color: $selected_fg_color;
      &:disabled {
        background-color: gtkopacity($selected_bg_color, 0.2);
        color: $insensitive_selected_fg_color;
      }
    }
  }
}


// /**************
//  * Emacs24/25 *
//  **************/

window#Emacs24,
window#Emacs {
  background-color: $bg_color;
  transition: none;

  > box#pane {
    background-color: $bg_color;

    > widget > toolbar#emacs-toolbar {
      background-color: $bg_color;
      transition: none;
    }

    > box > widget#emacs,
    > box > widget#emacs24,
    > box > widget#emacs25 {
     transition: none;

      > widget > scrollbar,
      > widget > scrollbar trough {
        background-color: $bg_color;
        transition: none;
      }
    }
  }
}


// /************
//  * Electron *
//  ************/

// workaround for the context-menus in Electron apps
// do not use the alpha-blended colours
window.popup:not(.csd) {
  menu {
    background-color: $secondary_base_color;

    menuitem {
      background-color: $secondary_base_color;
      color: mix($fg_color, $secondary_base_color, 75%);
      &:hover {
        background-color: mix($fg_color, $secondary_base_color, 10%);
        color: $fg_color;
      }
      &:disabled { // popup frame pulls this fg colours?
        background-color: $secondary_base_color;
        color: mix($fixed_fg_color, $secondary_base_color, 30%);

        label, // reset for generic non-composited Gtk+ apps
        arrow { color: mix($fg_color, $secondary_base_color, 30%); }
      }
    }
  }
}


// /********************
//  * Transmission-Gtk *
//  ********************/

window.background:not(.solid-csd) > box.vertical > grid.horizontal {
  > button.flat:not(.image-button),
  > button.flat.image-button.toggle {
    // set min-limits for rectangular images
    > image,
    > widget > box.horizontal > image {
      min-width: 20px;
      min-height: 20px;
    }
  }

  // add spacing for 'Ratio' label
  > label { padding: 0 rem(5.3px, $sw: 1.0) rem(1.3px, $sw: 1.0); }
}


// /**************************
//  * Remmina Remote Desktop *
//  **************************/

window.background:not(.solid-csd) {
  // inline headerbar
  > box.vertical > headerbar:not(.titlebar) {
    > box.horizontal {
      > entry,
      > entry.default { // .default is added when focused only? crazy...
        // always use inverted colours
        color: $inverted_secondary_fg_color;
        caret-color: $inverted_secondary_fg_color;
        &:focus {
          color: $inverted_fg_color;
          caret-color: $inverted_fg_color;
        }
        &:disabled { color: $insensitive_inverted_secondary_fg_color; }
      }

      // hide unneeded separator
      > separator { background-color: transparent; }
    }
  }
}


// /***********
//  * Synapse *
//  ***********/

window.background:not(.solid-csd) > box.vertical {
  > widget widget,
  > box.vertical widget {
    &:selected { // selected-row?
      color: $selected_fg_color;
      background-color: $selected_bg_color;
    }
  }
}


// /*******************
//  * MySQL-Workbench *
//  *******************/

window#wb_main_window {
  notebook#model_tabs {
    > box > header.top {
      background-color: $inverted_dark_color;

      tabs {
        arrow {
          color: $inverted_tertiary_fg_color;
          &:hover,
          &:active { color: $inverted_fg_color; }
          &:disabled { color: transparent; }
        }

        tab {
          &,
          label,
          button.flat { color: $inverted_tertiary_fg_color; }

          &:hover,
          &:checked {
            &,
            label,
            button.flat { color: $inverted_fg_color; }

            > image { background-color: $inverted_fg_color; }
          }
          &:disabled {
            &,
            label,
            button.flat { color: $insensitive_inverted_fg_color; }
          }

          > image { // 'Home' icon
            min-height: $icon_size;
            min-width: $icon_size;
            padding: rem(4px, $sw: 1.0);
            border-radius: 2px;
            background-color: $inverted_tertiary_fg_color;
          }
        }
      }
    }

    > stack > box.vertical > menubar { margin: 0 -1px; } // hide weird gap
  }

  box#dbquery,
  box#db.query.QueryBuffer,
  paned.vertical > box.horizontal > box.vertical > box.horizontal,
  notebook#model_tabs > box > stack > box.vertical > box.horizontal {
    border-bottom: 1px solid $borders_color;
  }

  button.flat.image-button { // revert to square
    margin: rem(5.3px) 0; // add vertical spacing
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    &.toggle:checked {
      border-image: radial-gradient(circle farthest-corner at center,
                                    $selected_bg_color 100%,
                                    transparent)
                                    0 0 2 / 0 0 2px;
      background-color: transparent;
    }
  }

  box.horizontal > combobox { margin: rem(5.3px) 0; } // add vertical spacing

  entry#find { margin: rem(5.3px) 0; } // add vertical spacing

  treeview.view {
    background-color: $base_color;
    transition: none;
    &:selected { // enforce standard selection styling
      &, &:focus { @extend %selected_items; }
    }
  }
}


// /***************
//  * Chrome(ium) *
//  ***************/

window.background.chromium {
  // checked-tab & toolbar & button widgets
  background-color: if($variant == 'light', $bg_color, $base_color);
  color: if($variant == 'light', $secondary_fg_color, $fg_color);

  // FIXME: not for actual button widgets but for toolbar's separators
  // crazy: src/+/master/chrome/browser/ui/libgtkui/gtk_ui.cc#891
  button { // for active-tab borders
    border-width: 1px;
    border-style: solid;
    border-color: if($variant == 'light',
                     $solid_light_borders_color,
                     mix($bg_color, $solid_dark_borders_color, 75%));
  }

  *:backdrop button { // outdated? let's unset borders
    border-color: transparent;
  }

  entry.chromium {
    &, &:focus { // overrides standard borders
      border-image: none;
      border: 1px solid $borders_color;
    }
  }

  // internal region of toolbar's entry widget
  > textview.view {
    background-color: $light_color;

    text {
      color: if($variant == 'light', $secondary_fg_color, $fg_color);
      caret-color: if($variant == 'light', $secondary_fg_color, $fg_color);
      &:focus {
        color: $fg_color;
        caret-color: $fg_color;
      }
      &:selected,
      selection {
        &, &:focus { @extend %selected_items; }
      }
    }
  }

  // spinner colour
  > spinner {
    color: $accent_label_color;
    &:disabled { color: mix($accent_label_color, $bg_color, 30%); }
  }

  menu menuitem:hover { // 61.0.3159 or higher
    // revive hovered backgrounds
    background-color: mix($fg_color, $secondary_base_color, 10%);
  }
}


// /*********
//  * Tilix *
//  *********/

window.background > headerbar.titlebar > box.horizontal.linked {
  > button.toggle.session-sidebar-button { // left-most revealer button
    min-height: $icon_size;
    padding-top: rem(($widget_size - $icon_size - 2.7px) / 2);
    padding-bottom: rem(($widget_size - $icon_size - 2.7px) / 2);
    border-radius: 2px;
    -gtk-outline-radius: 2px;
    font-weight: 700;

    > box { // reduce the gap between label and image
      > label {
        margin: rem(-2px) 0;
        &:dir(ltr) { padding: 0 rem(1.3px) 0 rem(4px); }
        &:dir(rtl) { padding: 0 rem(4px) 0 rem(1.3px); }
      }

      > image { // down-arrow
        &:dir(ltr) { padding: 0 rem(4px) 0 rem(1.3px); }
        &:dir(rtl) { padding: 0 rem(1.3px) 0 rem(4px); }
      }
    }
  }

  > button.image-button.session-new-button { // 'plus' button
                                             // hard-coded lateral-padding = 2px
    min-width: $icon_size * 1.5 - 2px * 2;

    // make spacing gap between "View Session Sidebar" button and this
    &:dir(ltr) { margin-left: 8px; }
    &:dir(rtl) { margin-right: 8px; }

    > widget > box > image { // add actual lateral spacing
      min-width: $icon_size * 1.5 - 2px * 2;
      padding: if($ref_weight < 1.0,
               0 rem(($widget_size - $icon_size * 1.5 - 2px) / 2),
               0 rem(($widget_size - $icon_size * 1.5) / 2));
    }
  }
}

// left-side revealer
window.background > overlay > revealer { // parent container
  &.left,
  &.right {
    > scrolledwindow.frame {
      border: none;
      box-shadow: $z-depth-3; // depth-4 is semamtically right,
                              // but too deep
    }

    &:not(.right) { // reserve area for drop-shadows
      > scrolledwindow.frame { margin-right: 16px; }
    }
    &:not(.left) {
      > scrolledwindow.frame { margin-left: 16px; }
    }
  }
}

list.tilix-session-sidebar {
  background-image: image($secondary_dark_color); // use -image property instead

  button.tilix-sidebar-close-button {
    min-height: 20px;
    min-width: 20px;
    padding: 0;
    color: gtkalpha($destructive_color, 0.75);
    &:hover,
    &:active,
    &:checked { color: $destructive_color; }
  }
}

// in-line titlebars
widget > box.terminal-titlebar {
  > button.flat.popup.toggle {
    &:dir(ltr) { padding: 0 rem(13.3px) 0 0; }
    &:dir(rtl) { padding: 0 0 0 rem(13.3px); }

    &:checked {
      border-image: radial-gradient(circle farthest-corner at center,
                                    $selected_bg_color 100%,
                                    transparent)
                                    0 0 2 / 0 0 2px;
      background-color: transparent;
    }

    label.tilix-terminal-title {
      // move button padding into label node
      padding: rem(9.3px) rem(13.3px) rem(10.7px);
      color: $secondary_fg_color;
      font-weight: 700;
      &:disabled { color: $insensitive_fg_color; }
      &:not(:disabled) {
        border-image: radial-gradient(circle farthest-corner at center,
                                      $selected_bg_color 100%,
                                      transparent)
                                      0 0 2 / 0 0 2px;
      }
    }

    &:hover,
    &:active,
    &:checked {
      &, label.tilix-terminal-title {
        &, &:disabled { color: $fg_color; }
      }
    }
  }

  > button.image-button { // 'plus' and 'close'
    &, &.toggle {
      margin: rem(2.7px) 0;
      padding: rem(10px - 2.7px);
      border-radius: 2px;
      -gtk-outline-radius: 2px;
    }
  }

  &.compact { // 'Small' option
    > button.flat.popup.toggle {
      &:dir(ltr),
      &:dir(rtl) { padding: 0; }

      label.tilix-terminal-title {
        padding: rem(1.3px, $sw: 1.0) rem(2.7px) rem(2.7px, $sw: 1.0);
      }
    }

    > button.image-button {
      &, &.toggle {
        margin: 0;
        padding: rem(2.7px, $sw: 1.0);
      }
    }
  }
}

